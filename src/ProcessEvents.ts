import { PROCESS_STATES } from 'ethpkg'

export const PROCESS_EVENTS = {

  ...PROCESS_STATES,

  CLIENT_INIT_STARTED: 'CLIENT_INIT_STARTED',

  CLIENT_START_STARTED: 'CLIENT_START_STARTED',
  CLIENT_START_FINISHED: 'CLIENT_START_FINISHED',

  APP_SERVER_START_STARTED: 'APP_SERVER_START_STARTED',
  APP_SERVER_START_FINISHED: 'APP_SERVER_START_FINISHED',

  // the client manager is loading the release / version list from a remote repo 
  RESOLVE_RELEASE_STARTED: 'RESOLVE_RELEASE_STARTED',
  RESOLVE_RELEASE_FINISHED: 'RESOLVE_RELEASE_FINISHED',

  // 
  VERIFICATION_ERROR: 'VERIFICATION_ERROR',
  VERIFICATION_FAILED: 'VERIFICATION_FAILED',
  PACKAGE_WRITTEN: 'PACKAGE_WRITTEN',
  BINARY_EXTRACTION_STARTED: 'BINARY_EXTRACTION_STARTED',
  BINARY_EXTRACTION_PROGRESS: 'BINARY_EXTRACTION_PROGRESS',
  BINARY_EXTRACTION_FINISHED: 'BINARY_EXTRACTION_FINISHED',

  // the extraction of all package contents started
  PACKAGE_EXTRACTION_STARTED: 'PACKAGE_EXTRACTION_STARTED',
  PACKAGE_EXTRACTION_PROGRESS: 'PACKAGE_EXTRACTION_PROGRESS',
  PACKAGE_EXTRACTION_FINISHED: 'PACKAGE_EXTRACTION_FINISHED',

  RESOLVE_DEPENDENCIES_STARTED: 'RESOLVE_DEPENDENCIES_STARTED',
  RESOLVE_DEPENDENCIES_FINISHED: 'RESOLVE_DEPENDENCIES_FINISHED',

  DOCKERFILE_FOUND: 'DOCKERFILE_FOUND',

  CREATE_DOCKER_IMAGE_FROM_FILE_STARTED: 'CREATE_DOCKER_IMAGE_FROM_FILE_STARTED',
  CREATE_DOCKER_IMAGE_FROM_FILE_FINISHED: 'CREATE_DOCKER_IMAGE_FROM_FILE_FINISHED',

  FIND_EXISTING_DOCKER_CONTAINER_STARTED: 'FIND_EXISTING_DOCKER_CONTAINER_STARTED',
  FIND_EXISTING_DOCKER_CONTAINER_FINISHED: 'FIND_EXISTING_DOCKER_CONTAINER_FINISHED',

  CREATE_DOCKER_CONTAINER_STARTED: 'CREATE_DOCKER_CONTAINER_STARTED',
  CREATE_DOCKER_CONTAINER_FINISHED: 'CREATE_DOCKER_CONTAINER_FINISHED',

  DOCKER_CLIENT_READY: 'DOCKER_CLIENT_READY',

  // raw docker events during setup of images & containers
  DOCKER_EVENT: 'DOCKER_EVENT',

  CREATE_SIGNING_KEY_STARTED: PROCESS_STATES.CREATE_SIGNING_KEY_STARTED,
  CREATE_SIGNING_KEY_FINISHED: PROCESS_STATES.CREATE_SIGNING_KEY_FINISHED,

  CREATE_PACKAGE_STARTED: PROCESS_STATES.CREATE_PACKAGE_STARTED,
  CREATE_PACKAGE_PROGRESS: PROCESS_STATES.CREATE_PACKAGE_PROGRESS,
  CREATE_PACKAGE_FINISHED: PROCESS_STATES.CREATE_PACKAGE_FINISHED,

  SIGN_WORKFLOW_PKG_STARTED: 'SIGN_WORKFLOW_PKG_STARTED',
  SIGN_WORKFLOW_PKG_FINISHED: 'SIGN_WORKFLOW_PKG_FINISHED',

  RUN_WORKFLOW_STARTED: 'RUN_WORKFLOW_STARTED',
  RUN_WORKFLOW_FINISHED: 'RUN_WORKFLOW_FINISHED',

  UPLOAD_STARTED: PROCESS_STATES.UPLOAD_STARTED,
  UPLOAD_PROGRESS: PROCESS_STATES.UPLOAD_PROGRESS,
  UPLOAD_FINISHED: PROCESS_STATES.UPLOAD_FINISHED,
}